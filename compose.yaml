version: "3.9"

# ---------------------------------------------------------------------------
# VOLUMES
# ---------------------------------------------------------------------------
volumes:
  pgdata:

# ---------------------------------------------------------------------------
# NETWORKS
# ---------------------------------------------------------------------------
networks:
  internal: {}    # приватная bridge-сеть (Postgres, EMQX, Collector, Gateway)
  public:   {}    # наружу выводим только gateway и streamlit

# ---------------------------------------------------------------------------
# SERVICES
# ---------------------------------------------------------------------------
services:
  # ---------------------------- DATABASE -----------------------------------
  postgres:
    image: postgis/postgis:16-3.4
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB:       ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal

  # ---------------------------- MQTT BROKER --------------------------------
  emqx:
    image: emqx/emqx:5.6
    restart: always
    env_file: .env
    # Оставьте порт 1883 наружу только при локальной отладке
    ports:
      - "${MQTT_PORT:-1883}:1883"     # MQTT
      - "18083:18083"                 # EMQX Web-UI
    networks:
      - internal

  # ---------------------------- ROS SWITCH LOGIC ---------------------------
  switch_logic:
    build:
      context: .
      dockerfile: docker/switch_logic/Dockerfile
      target: runtime
    network_mode: host          # DDS multicast, портов наружу не открывает
    env_file: .env
    depends_on:
      - emqx
    restart: always

  # ---------------------------- AI PLANNER ---------------------------------
  ai_planner:
    build:
      context: .
      dockerfile: docker/ai_planner/Dockerfile
      target: runtime
    network_mode: host
    env_file: .env
    depends_on:
      - emqx
      - switch_logic
    restart: always

  # ---------------------------- ROS → MQTT BRIDGE --------------------------
  ros_mqtt_bridge:
    build:
      context: .
      dockerfile: docker/bridge/Dockerfile
      target: runtime
    network_mode: host
    env_file: .env           # DEVICE_ID, MQTT_HOST, MQTT_PORT
    depends_on:
      - emqx
    restart: always

  # ---------------------------- TELEMETRY COLLECTOR ------------------------
  collector:
    build:
      context: .
      dockerfile: docker/collector/Dockerfile
      target: runtime
    env_file: .env
    depends_on:
      - postgres
      - emqx
    networks:
      - internal
    restart: always

  # ---------------------------- FASTAPI GATEWAY ----------------------------
  gateway:
    build:
      context: .
      dockerfile: docker/gateway/Dockerfile
      target: runtime
    env_file: .env
    ports:
      - "8000:${API_PORT:-8000}"     # публичная точка API
    depends_on:
      - postgres
      - emqx
    networks:
      - internal
      - public
    restart: always

  generator:
    build:
      context: .
      dockerfile: docker/generator/Dockerfile
    environment:
      DEVICE_ID: ${DEVICE_ID}
      MQTT_HOST: ${MQTT_HOST}         # брокер во внутренней сети
      MQTT_PORT: ${MQTT_PORT}
      FREQ_HZ: ${FREQ_HZ}
    depends_on:
      - emqx
    networks:
      - internal
    restart: always
    
  frontend:
    build: 
      context: .
      dockerfile: docker/frontend/Dockerfile
    environment:
      - NEXT_PUBLIC_GATEWAY=${NEXT_PUBLIC_GATEWAY}
      - NEXT_PUBLIC_MAPBOX_TOKEN=${NEXT_PUBLIC_MAPBOX_TOKEN}
    ports: ["3000:3000"]
    depends_on: [gateway]
    restart: always
  # gazebo:
  #   build:
  #     context: docker/gazebo  
  #     dockerfile: Dockerfile
  #   network_mode: host
  #   depends_on:
  #     - ros_mqtt_bridge

  # ---------------------------- STREAMLIT DASHBOARD ------------------------
  # streamlit:
  #   build:
  #     context: .
  #     dockerfile: docker/streamlit/Dockerfile
  #     target: runtime
  #   env_file: .env
  #   ports:
  #     - "8501:8501"
  #   depends_on:
  #     - gateway
  #   networks:
  #     - internal
  #     - public
