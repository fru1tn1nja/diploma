version: "3.9"

# ---------------------------------------------------------------------------
# VOLUMES
# ---------------------------------------------------------------------------
volumes:
  pgdata:

# ---------------------------------------------------------------------------
# NETWORKS
# ---------------------------------------------------------------------------
networks:
  internal: {}    # приватная bridge-сеть (Postgres, EMQX, Collector, Gateway)
  public:   {}

# ---------------------------------------------------------------------------
# SERVICES
# ---------------------------------------------------------------------------
services:
  # ---------------------------- DATABASE -----------------------------------
  postgres:
    image: postgis/postgis:16-3.4
    restart: on-failure
    env_file: .env
    environment:
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB:       ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d 
    networks:
      - internal

  # ---------------------------- MQTT BROKER --------------------------------
  emqx:
    image: emqx/emqx:5.6
    restart: on-failure
    env_file: .env
    ports:
      - "${MQTT_PORT:-1883}:1883"     # MQTT
      - "8083:8083"                   # ws
      - "18083:18083"                 # EMQX Web-UI
    networks:
      - internal

  # ---------------------------- ROS SWITCH LOGIC ---------------------------
  switch_logic:
    build:
      context: .
      dockerfile: docker/switch_logic/Dockerfile
    env_file: .env
    depends_on:
      - emqx
    networks:
      - internal
    

  # ---------------------------- AI PLANNER ---------------------------------
  ai_planner:
    build:
      context: .
      dockerfile: docker/ai_planner/Dockerfile
    env_file: .env
    depends_on:
      - emqx
      - switch_logic
      - postgres
    networks:
      - internal
  

  # ---------------------------- ROS → MQTT BRIDGE --------------------------
  ros_mqtt_bridge:
    build:
      context: .
      dockerfile: docker/bridge/Dockerfile
    env_file: .env
    depends_on:
      - emqx
    networks:
      - internal

  # ---------------------------- TELEMETRY COLLECTOR ------------------------
  collector:
    build:
      context: .
      dockerfile: docker/collector/Dockerfile
      target: runtime
    env_file: .env
    depends_on:
      - postgres
      - emqx
    networks:
      - internal
    restart: on-failure

  # ---------------------------- FASTAPI GATEWAY ----------------------------
  gateway:
    build:
      context: .
      dockerfile: docker/gateway/Dockerfile
      target: runtime
    env_file: .env
    ports:
      - "8000:${API_PORT:-8000}"
    depends_on:
      - postgres
      - emqx
    networks:
      - internal
      - public
    restart: on-failure

  generator:
    build:
      context: .
      dockerfile: docker/generator/Dockerfile
    environment:
      DEVICE_ID: ${DEVICE_ID}
      MQTT_HOST: ${MQTT_HOST}
      MQTT_PORT: ${MQTT_PORT}
      FREQ_HZ: ${FREQ_HZ}
    depends_on:
      - emqx
    networks:
      - internal
    restart: on-failure
    
  frontend:
    build: 
      context: .
      dockerfile: docker/frontend/Dockerfile
    environment:
      - NEXT_PUBLIC_GATEWAY=${NEXT_PUBLIC_GATEWAY}
      - NEXT_PUBLIC_MAPBOX_TOKEN=${NEXT_PUBLIC_MAPBOX_TOKEN}
    ports: ["3000:3000"]
    depends_on: [gateway]
    restart: on-failure

  rosbridge:
    build:
      context: .
      dockerfile: docker/rosbridge/Dockerfile
    env_file: .env
    depends_on:
      - switch_logic
    networks:
      - internal
    ports:
      # WebSocket API
      - "9090:9090"
      # и те же Fast RTPS порты, чтобы ноды могли общаться внутри bridge
      - "7400-7402:7400-7402/udp"
      - "7410-7412:7410-7412/udp"
      - "7676:7676/udp"

  mission_bridge:
    build:
      context: .
      dockerfile: docker/mission_bridge/Dockerfile
    env_file: .env
    depends_on:
      - emqx
    networks:
      - internal
  mode_writer:
    build:
      context: .
      dockerfile: docker/mode_writer/Dockerfile
    env_file: .env
    environment:
      - DB_DSN=${DB_DSN}
    networks:
      - internal
    depends_on:
      - postgres
    restart: on-failure

  mission_mqtt_to_ros:
    build:
      context: .
      dockerfile: docker/mission_mqtt_to_ros/Dockerfile
    env_file: .env
    depends_on:
      - emqx
    networks:
      - internal

  obstacle_bridge:
    build:
      context: .
      dockerfile: docker/obstacle_bridge/Dockerfile
    env_file: .env
    depends_on:
      - emqx
    networks:
      - internal
  # gazebo:
  #   build:
  #     context: docker/gazebo  
  #     dockerfile: Dockerfile
  #   network_mode: host        # DDS/RTPS multicast shared with ROS 2 nodes
  #   environment:
  #     - ROS_DOMAIN_ID=0
  #     - GAZEBO_HEADLESS=1      # выключаем X11
  #   command: [
  #     "gazebo", "--verbose",
  #     "-s", "libgazebo_ros_init.so",
  #     "-s", "libgazebo_ros_factory.so",
  #     "/sim_ws/launch/world.world",
  #     "--render-engine", "ogre"
  #   ]
  #   depends_on:
  #     - ros_mqtt_bridge        # или любой другой ваш ROS‑сервис
  #   restart: unless-stopped

  # gzweb:
  #   build:
  #     context: .
  #     dockerfile: docker/gzweb/Dockerfile
  #   network_mode: host         # делит те же multicast пакеты DDS
  #   depends_on:
  #     - gazebo
  #   restart: unless-stopped

  # ---------------------------- STREAMLIT DASHBOARD ------------------------

  streamlit:
    build:
      context: .
      dockerfile: docker/streamlit/Dockerfile
    ports:
      - "8501:8501"
    env_file: .env
    depends_on:
      - gateway
    networks:
      - internal
      - public
    restart: unless-stopped